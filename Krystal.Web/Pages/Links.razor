@page "/links"
@inject HttpClient Api
@inject NavigationManager Navigation

<h3>Links</h3>

@if (_links == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <br />
    <table>
        <tr>
            <td width="100px">URL&nbsp;</td>
            <td width="100%"><input />&nbsp;</td>
            <td width="100px">Slug&nbsp;</td>
            <td width="200px"><input />&nbsp;</td>
            <td width="100px">Expiry&nbsp;</td>
            <td width="100px"><input />&nbsp;</td>
            <td><button @onclick="(e) => OnSave(Guid.Empty, e)">Save</button></td>
        </tr>
    </table>
    <br />
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Slug</th>
                <th>Url</th>
                <th>Expiry</th>
                <th>&nbsp;</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var link in _links)
            {
                <tr>
                    <td>@link.Id</td>
                    <td>@link.Slug</td>
                    <td>@link.Url</td>
                    <td>@link.Expiry</td>
                    <td><button @onclick="(e) => OnDelete(link.Id, e)">Delete</button>&nbsp;&nbsp;&nbsp;<button>Edit</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Link[] _links;

    protected override async Task OnInitializedAsync()
    {
        _links = await Api.GetFromJsonAsync<Link[]>($"{Program.Endpoint}/links");
    }

    protected async void OnSave(Guid linkId, MouseEventArgs args)
    {

    }

    protected async void OnDelete(Guid linkId, MouseEventArgs args)
    {
        var response = await Api.DeleteAsync($"{Program.Endpoint}/links/{linkId}");

        if (response != null && response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/");
            Navigation.NavigateTo("/links");
        }
    }
}